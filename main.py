import requests
import sqlite3
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters

# –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ç–æ–∫–µ–Ω —Ç–µ–ª–µ–≥—Ä–∞–º–º-–±–æ—Ç–∞
TELEGRAM_BOT_TOKEN = '7432735809:AAFhOHGmoBE8rdJewqjfAHICII3dEMML9FU'
# URL –¥–ª—è API Wildberries
WILDBERRIES_BASE_URL = 'https://supplies-api.wildberries.ru/api/v1'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('user_data.db')
    cursor = conn.cursor()
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        telegram_id INTEGER PRIMARY KEY,
        api_token TEXT
    )
    ''')
    conn.commit()
    conn.close()

def get_api_token(telegram_id):
    conn = sqlite3.connect('user_data.db')
    cursor = conn.cursor()
    cursor.execute('SELECT api_token FROM users WHERE telegram_id = ?', (telegram_id,))
    result = cursor.fetchone()
    conn.close()
    return result[0] if result else None

def set_api_token(telegram_id, api_token):
    conn = sqlite3.connect('user_data.db')
    cursor = conn.cursor()
    cursor.execute('REPLACE INTO users (telegram_id, api_token) VALUES (?, ?)', (telegram_id, api_token))
    conn.commit()
    conn.close()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π ID —Å–∫–ª–∞–¥–æ–≤ –∏ –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
WAREHOUSE_NAMES = {
    1733: '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥',
    507: '–ö–æ–ª–µ–¥–∏–Ω–æ',
    124731: '–ö—Ä—ë–∫—à–∏–Ω–æ –ö–ë–¢',
    686: '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫',
    2737: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
    117986: '–ö–∞–∑–∞–Ω—å',
    130744: '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä',
    117501: '–ü–æ–¥–æ–ª—å—Å–∫',
    204939: '–ê—Å—Ç–∞–Ω–∞',
    159402: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥ –®—É—à–∞—Ä—ã',
    205228: '–ë–µ–ª–∞—è –î–∞—á–∞',
    120762: '–≠–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–ª—å',
    121709: '–≠–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–ª—å –ö–ë–¢',
    206348: '–¢—É–ª–∞',
    206968: '–ß–µ—Ö–æ–≤',
    208941: '–î–æ–º–æ–¥–µ–¥–æ–≤–æ',
    208277: '–ù–µ–≤–∏–Ω–Ω–æ–º—ã—Å—Å–∫',
    210001: '–ß–µ—Ö–æ–≤ 2',
    210515: '–í—ë—à–∫–∏',
    211622: '–ú–∏–Ω—Å–∫',
    1193: '–•–∞–±–∞—Ä–æ–≤—Å–∫',
    207743: '–ü—É—à–∫–∏–Ω–æ',
    218210: '–û–±—É—Ö–æ–≤–æ',
    218623: '–ü–æ–¥–æ–ª—å—Å–∫ 3',
    218987: '–ê–ª–º–∞—Ç—ã –ê—Ç–∞–∫–µ–Ω—Ç',
    300571: '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥ 2',
    300168: '–†–∞–¥—É–º–ª—è',
    205985: '–ö—Ä—ã–ª–æ–≤—Å–∫–∞—è',
    301229: '–ü–æ–¥–æ–ª—å—Å–∫ 4',
    300711: '–£—Ä–∞–ª—å—Å–∫',
    301920: '–ü—è—Ç–∏–≥–æ—Ä—Å–∫',
    301760: '–†—è–∑–∞–Ω—å (–¢—é—à–µ–≤—Å–∫–æ–µ)',
    206236: '–ë–µ–ª—ã–µ —Å—Ç–æ–ª–±—ã',
    302335: '–ö—É–∑–Ω–µ—Ü–∫',
    303295: '–ö–ª–∏–Ω',
    312807: '–û–±—É—Ö–æ–≤–æ 2',
    218644: '–•–∞–±–∞—Ä–æ–≤—Å–∫ 2',
    301809: '–ö–æ—Ç–æ–≤—Å–∫',
    301805: '–ù–æ–≤–æ—Å–µ–º–µ–π–∫–∏–Ω–æ',
    312259: '–°–¶ –®—É—à–∞—Ä—ã',
    301983: '–°–¶ –í–æ–ª–≥–æ–≥—Ä–∞–¥',
    218628: '–°–¶ –ò–∂–µ–≤—Å–∫',
    302737: '–°–¶ –ë–∞—Ä–Ω–∞—É–ª',
    316879: '–°–¶ –ê–∫—Ç–æ–±–µ',
    321932: '–ß–∞—à–Ω–∏–∫–æ–≤–æ',
    324108: '–ê—Å—Ç–∞–Ω–∞ 2'
}

# –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏
monitoring_jobs = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    telegram_id = update.message.from_user.id
    keyboard = [
        [InlineKeyboardButton(get_api_token_button_text(telegram_id), callback_data='setapi')],
        [InlineKeyboardButton("–ù–∞—á–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", callback_data='monitor')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?', reply_markup=reply_markup)

def get_api_token_button_text(telegram_id):
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ '–í–≤–µ—Å—Ç–∏ API —Ç–æ–∫–µ–Ω' —Å —É—á–µ—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è."""
    api_token = get_api_token(telegram_id)
    if api_token:
        return "–í–≤–µ—Å—Ç–∏ API —Ç–æ–∫–µ–Ω [‚úÖ]"
    else:
        return "–í–≤–µ—Å—Ç–∏ API —Ç–æ–∫–µ–Ω"

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    if query.data == 'monitor':
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        photo_path = 'warehouse.png'
        await context.bot.send_photo(chat_id=query.message.chat_id, photo=open(photo_path, 'rb'))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="–í–≤–µ–¥–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —Å–∫–ª–∞–¥–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.\n–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∑–¥–µ—Å—å‚¨áÔ∏è",
            reply_markup=back_button()
        )
        context.user_data['awaiting'] = 'monitor'
    elif query.data == 'setapi':
        await query.edit_message_text(
            text="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à API —Ç–æ–∫–µ–Ω (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞):",
            reply_markup=back_button()
        )
        context.user_data['awaiting'] = 'setapi'
    elif query.data == 'back':
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —ç–∫—Ä–∞–Ω—É
        telegram_id = query.from_user.id
        await query.edit_message_text(
            text="–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
            reply_markup=start_button(telegram_id)
        )
        # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "awaiting", —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—É—Ç–∞–Ω–∏—Ü—ã
        context.user_data.pop('awaiting', None)
    elif query.data == 'stop_monitor':
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        user_id = query.from_user.id
        if user_id in monitoring_jobs:
            monitoring_jobs[user_id]['job'].schedule_removal()
            del monitoring_jobs[user_id]
            await query.edit_message_text(
                text="–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω‚õîÔ∏è.",
                reply_markup=start_button(user_id)
            )
        else:
            await query.edit_message_text(
                text="–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –∑–∞–ø—É—â–µ–Ωüö´.",
                reply_markup=start_button(user_id)
            )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.message.from_user.id
    text = update.message.text

    if 'awaiting' not in context.user_data:
        await update.message.reply_text('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ /start.')
        return

    action = context.user_data.pop('awaiting')

    if action == 'monitor':
        api_token = get_api_token(user_id)
        if not api_token:
            await update.message.reply_text('–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ API —Ç–æ–∫–µ–Ω —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /setapi.')
            return

        warehouse_ids = list(map(int, text.split(',')))
        context.user_data['warehouse_ids'] = warehouse_ids

        if user_id in monitoring_jobs:
            monitoring_jobs[user_id]['job'].schedule_removal()
            del monitoring_jobs[user_id]

        job_queue = context.job_queue
        job = job_queue.run_repeating(
            lambda job_context: check_warehouses(job_context, user_id),
            interval=60,
            first=0
        )

        monitoring_jobs[user_id] = {
            'job': job,
            'warehouse_ids': warehouse_ids
        }

        await update.message.reply_text(
            '–ë–æ—Ç –æ–ø–æ–≤–µ—Å—Ç–∏—Ç –≤–∞—Å –æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –ø—Ä–∏–µ–º–∫–µ!',
            reply_markup=stop_button()
        )
    elif action == 'setapi':
        api_token = text
        set_api_token(user_id, api_token)
        await update.message.reply_text('API —Ç–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω!')
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ
        await update.message.reply_text(
            '–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?',
            reply_markup=start_button(user_id)
        )

async def check_warehouses(context: ContextTypes.DEFAULT_TYPE, user_id: int) -> None:
    warehouse_ids = monitoring_jobs[user_id]['warehouse_ids']
    api_token = get_api_token(user_id)

    if api_token and warehouse_ids:
        coefficients = get_acceptance_coefficients(api_token, warehouse_ids)
        if coefficients:
            for item in coefficients:
                warehouse_id = item['warehouseID']
                coefficient = item.get('coefficient', None)
                box_type_id = item.get('boxTypeID', None)
                date = item.get('date', None).split("T")[0]  # –û–±—Ä–µ–∑–∞–µ–º –≤—Ä–µ–º—è, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É

                box_type_names = {
                    2: '–ö–æ—Ä–æ–±–∞',
                    5: '–ú–æ–Ω–æ–ø–∞–ª–ª–µ—Ç—ã',
                    6: '–°—É–ø–µ—Ä—Å–µ–π—Ñ'
                }
                box_type_name = box_type_names.get(box_type_id, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø')

                if coefficient == 0 and box_type_id == 2:
                    warehouse_name = WAREHOUSE_NAMES.get(warehouse_id)
                    if warehouse_name:
                        message = (
                            f"‚úÖ–î–æ—Å—Ç—É–ø–Ω–∞—è –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø—Ä–∏–µ–º–∫–∞!‚úÖ\n\n"
                            f"–°–∫–ª–∞–¥: {warehouse_name}\n"
                            f"–î–∞—Ç–∞: {date}\n"
                            f"–¢–∏–ø: {box_type_name}\n"
                            f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {coefficient}"
                        )

                        keyboard = [
                            [InlineKeyboardButton("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥‚è∏", callback_data='stop_monitor')]
                        ]
                        reply_markup = InlineKeyboardMarkup(keyboard)

                        await context.bot.send_message(chat_id=user_id, text=message, reply_markup=reply_markup)
        else:
            pass

def back_button():
    return InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')]])

def start_button(telegram_id):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton(get_api_token_button_text(telegram_id), callback_data='setapi')],
        [InlineKeyboardButton("–ù–∞—á–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", callback_data='monitor')]
    ])

def stop_button():
    return InlineKeyboardMarkup([[InlineKeyboardButton("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥‚è∏", callback_data='stop_monitor')]])

def get_acceptance_coefficients(api_token, warehouse_ids):
    headers = {
        'Authorization': f'Bearer {api_token}'
    }
    params = {
        'warehouseIDs': ','.join(map(str, warehouse_ids))
    }
    response = requests.get(f'{WILDBERRIES_BASE_URL}/acceptance/coefficients', headers=headers, params=params)
    if response.status_code == 200:
        return response.json()
    else:
        return None

def main():
    init_db()
    application = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    application.add_handler(CommandHandler('start', start))
    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    application.run_polling()

if __name__ == '__main__':
    main()
